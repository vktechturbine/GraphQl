import type { ReqRef, Request, ResponseToolkit, RouteOptions, Server } from '@hapi/hapi';
import type { ApolloServer, BaseContext, ContextFunction } from '@apollo/server';
export interface HapiContextFunctionArgument {
    request: Request;
    h: ResponseToolkit;
}
export interface HapiApolloPluginOptions<TContext extends BaseContext> {
    apolloServer: ApolloServer<TContext>;
    context?: ContextFunction<[HapiContextFunctionArgument], TContext>;
    path?: string;
    getRoute?: {
        options?: RouteOptions<ReqRef> | ((server: Server) => RouteOptions<ReqRef>) | undefined;
        rules?: ReqRef['Rules'] | undefined;
        vhost?: string | string[] | undefined;
    };
    postRoute?: {
        options?: RouteOptions<ReqRef> | ((server: Server) => RouteOptions<ReqRef>) | undefined;
        rules?: ReqRef['Rules'] | undefined;
        vhost?: string | string[] | undefined;
    };
}
declare const hapiPlugin: {
    pkg: any;
    register: (server: Server, opts: HapiApolloPluginOptions<any>) => Promise<void>;
};
export default hapiPlugin;
//# sourceMappingURL=index.d.ts.map