"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const server_1 = require("@apollo/server");
function hapiMiddleware(server, options) {
    server.assertStarted('hapiMiddleware()');
    const defaultContext = async () => ({});
    const context = options?.context ?? defaultContext;
    const path = options?.path || '/';
    return async (request, h, err) => {
        if (request.path === path) {
            if (err) {
                console.error('have error', err.message, err.stack);
                return h.response(err.message).code(500).takeover();
            }
            const { body, headers, status } = await server.executeHTTPGraphQLRequest({
                httpGraphQLRequest: toGraphqlRequest(request),
                context: () => context({
                    request,
                    h,
                }),
            });
            if (body.kind === 'complete') {
                let response = h.response(body.string);
                response = response.code(status || 200);
                for (const [key, value] of headers) {
                    response = response.header(key, value);
                }
                return response.takeover();
            }
            throw new Error('Incremental delivery not implemented');
        }
        return h.continue;
    };
}
function toGraphqlRequest(request) {
    return {
        method: request.method ? request.method.toUpperCase() : 'POST',
        headers: normalizeHeaders(request.headers),
        search: request.url.search,
        body: request.payload,
    };
}
function normalizeHeaders(headers) {
    const newHeaders = new server_1.HeaderMap();
    for (const [key, value] of Object.entries(headers)) {
        if (value !== undefined) {
            newHeaders.set(key, Array.isArray(value) ? value.join(', ') : value);
        }
    }
    return newHeaders;
}
const hapiPlugin = {
    pkg: require('../package.json'),
    register: async function (server, opts) {
        const apolloServer = opts.apolloServer;
        if (!apolloServer) {
            throw new Error('Apollo server instance not provided in options');
        }
        const defaultGetOptions = {
            cors: true,
        };
        const getOptions = opts.getRoute?.options;
        delete opts.getRoute?.options;
        server.route({
            ...opts.getRoute,
            ...{
                path: opts.path || '/',
                method: 'GET',
                handler: hapiMiddleware(apolloServer, {
                    context: opts.context,
                    path: opts.path,
                }),
                options: {
                    ...defaultGetOptions,
                    ...getOptions,
                },
            },
        });
        const defaultPostOptions = {
            cors: true,
        };
        const postOptions = opts.postRoute?.options;
        delete opts.postRoute?.options;
        server.route({
            ...opts.postRoute,
            ...{
                path: opts.path || '/',
                method: 'POST',
                handler: hapiMiddleware(apolloServer, {
                    context: opts.context,
                    path: opts.path,
                }),
                options: {
                    ...defaultPostOptions,
                    ...postOptions,
                },
            },
        });
    },
};
exports.default = hapiPlugin;
//# sourceMappingURL=index.js.map